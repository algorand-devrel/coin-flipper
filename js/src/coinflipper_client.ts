import algosdk from "algosdk";
import * as bkr from "beaker-ts";
export class CoinFlipper extends bkr.ApplicationClient {
    desc: string = "";
    override appSchema: bkr.Schema = { declared: {}, dynamic: {} };
    override acctSchema: bkr.Schema = { declared: { bet: { type: bkr.AVMType.uint64, key: "bet", desc: "", static: false }, commitment_round: { type: bkr.AVMType.uint64, key: "commitment_round", desc: "", static: false }, heads: { type: bkr.AVMType.uint64, key: "heads", desc: "", static: false } }, dynamic: {} };
    override approvalProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDcKaW50Y2Jsb2NrIDAgMSA4CmJ5dGVjYmxvY2sgMHg2MzZmNmQ2ZDY5NzQ2ZDY1NmU3NDVmNzI2Zjc1NmU2NCAweDYyNjU3NCAweDY4NjU2MTY0NzMKdHhuIE51bUFwcEFyZ3MKaW50Y18wIC8vIDAKPT0KYm56IG1haW5fbDYKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4ZjI4YmRhYSAvLyAiZmxpcF9jb2luKHBheSx1aW50NjQsYm9vbCl2b2lkIgo9PQpibnogbWFpbl9sNQp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGJhMTFiM2ZmIC8vICJzZXR0bGUoYXBwbGljYXRpb24pc3RyaW5nIgo9PQpibnogbWFpbl9sNAplcnIKbWFpbl9sNDoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmNhbGxzdWIgc2V0dGxlXzcKc3RvcmUgMwpwdXNoYnl0ZXMgMHgxNTFmN2M3NSAvLyAweDE1MWY3Yzc1CmxvYWQgMwpjb25jYXQKbG9nCmludGNfMSAvLyAxCnJldHVybgptYWluX2w1Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKc3RvcmUgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmludGNfMCAvLyAwCmludGNfMiAvLyA4CioKZ2V0Yml0CnN0b3JlIDIKdHhuIEdyb3VwSW5kZXgKaW50Y18xIC8vIDEKLQpzdG9yZSAwCmxvYWQgMApndHhucyBUeXBlRW51bQppbnRjXzEgLy8gcGF5Cj09CmFzc2VydApsb2FkIDAKbG9hZCAxCmxvYWQgMgpjYWxsc3ViIGZsaXBjb2luXzQKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDY6CnR4biBPbkNvbXBsZXRpb24KaW50Y18wIC8vIE5vT3AKPT0KYm56IG1haW5fbDEyCnR4biBPbkNvbXBsZXRpb24KaW50Y18xIC8vIE9wdEluCj09CmJueiBtYWluX2wxMQp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTAKZXJyCm1haW5fbDEwOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBkZWxldGVfMgppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTE6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzMKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDEyOgp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGNyZWF0ZQpjcmVhdGVfMDoKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBhdXRoX29ubHkKYXV0aG9ubHlfMToKZ2xvYmFsIENyZWF0b3JBZGRyZXNzCj09CnJldHN1YgoKLy8gZGVsZXRlCmRlbGV0ZV8yOgp0eG4gU2VuZGVyCmNhbGxzdWIgYXV0aG9ubHlfMQovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmludGNfMSAvLyAxCnJldHVybgoKLy8gb3B0X2luCm9wdGluXzM6CmludGNfMSAvLyAxCnJldHVybgoKLy8gZmxpcF9jb2luCmZsaXBjb2luXzQ6CnN0b3JlIDkKc3RvcmUgOApzdG9yZSA3CmxvYWQgNwpndHhucyBBbW91bnQKcHVzaGludCA1MDAwIC8vIDUwMDAKPj0KLy8gcGF5bWVudCBtdXN0IGJlID49IDVtQQphc3NlcnQKbG9hZCA3Cmd0eG5zIFJlY2VpdmVyCmdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCj09Ci8vIHBheW1lbnQgbXVzdCB0byB0aGUgY29udHJhY3QgYWRkcmVzcwphc3NlcnQKbG9hZCA4CmludGNfMiAvLyA4CiUKaW50Y18wIC8vIDAKPT0KLy8gcm91bmQgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDgKYXNzZXJ0CmxvYWQgOApnbG9iYWwgUm91bmQKaW50Y18yIC8vIDgKKwo+PQovLyByb3VuZCBtdXN0IGJlIGF0IGxlYXN0IDEgaW50ZXJ2YWwgaW4gdGhlIGZ1dHVyZQphc3NlcnQKdHhuIFNlbmRlcgppbnRjXzAgLy8gMApieXRlY18wIC8vICJjb21taXRtZW50X3JvdW5kIgphcHBfbG9jYWxfZ2V0X2V4CnN0b3JlIDExCnN0b3JlIDEwCmxvYWQgMTEKIQovLyB0aGVyZSBpcyBhbHJlYWR5IGEgY29tbWl0bWVudCBvdXRzdGFuZGluZwphc3NlcnQKdHhuIFNlbmRlcgpieXRlY18wIC8vICJjb21taXRtZW50X3JvdW5kIgpsb2FkIDgKYXBwX2xvY2FsX3B1dAp0eG4gU2VuZGVyCmJ5dGVjXzEgLy8gImJldCIKbG9hZCA3Cmd0eG5zIEFtb3VudAphcHBfbG9jYWxfcHV0CnR4biBTZW5kZXIKYnl0ZWNfMiAvLyAiaGVhZHMiCmxvYWQgOQphcHBfbG9jYWxfcHV0CnJldHN1YgoKLy8gZ2V0X3JhbmRvbW5lc3MKZ2V0cmFuZG9tbmVzc181Ogp0eG4gU2VuZGVyCmJ5dGVjXzAgLy8gImNvbW1pdG1lbnRfcm91bmQiCmFwcF9sb2NhbF9nZXQKc3RvcmUgMTIKaW50Y18wIC8vIDAKaXRvYgpleHRyYWN0IDYgMApwdXNoYnl0ZXMgMHggLy8gIiIKY29uY2F0CnN0b3JlIDEzCml0eG5fYmVnaW4KcHVzaGludCA2IC8vIGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQpwdXNoaW50IDExMDA5NjAyNiAvLyAxMTAwOTYwMjYKaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECnB1c2hieXRlcyAweDQ3YzIwYzIzIC8vICJtdXN0X2dldCh1aW50NjQsYnl0ZVtdKWJ5dGVbXSIKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKbG9hZCAxMgppdG9iCml0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCmxvYWQgMTMKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKaXR4bl9zdWJtaXQKaXR4biBMYXN0TG9nCmV4dHJhY3QgNCAwCnJldHN1YgoKLy8gcGF5b3V0CnBheW91dF82OgppdHhuX2JlZ2luCmludGNfMSAvLyBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQp0eG4gU2VuZGVyCml0eG5fZmllbGQgUmVjZWl2ZXIKdHhuIFNlbmRlcgpieXRlY18xIC8vICJiZXQiCmFwcF9sb2NhbF9nZXQKcHVzaGludCAyIC8vIDIKKgppdHhuX2ZpZWxkIEFtb3VudAppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHNldHRsZQpzZXR0bGVfNzoKc3RvcmUgNApjYWxsc3ViIGdldHJhbmRvbW5lc3NfNQpleHRyYWN0IDIgMAppbnRjXzAgLy8gMApnZXRiaXQKc3RvcmUgNgp0eG4gU2VuZGVyCmJ5dGVjXzIgLy8gImhlYWRzIgphcHBfbG9jYWxfZ2V0CmxvYWQgNgo9PQpibnogc2V0dGxlXzdfbDIKcHVzaGJ5dGVzIDB4NTk2Zjc1MjA2YzZmNzM3NDIwM2EyOCAvLyAiWW91IGxvc3QgOigiCnN0b3JlIDUKbG9hZCA1CmxlbgppdG9iCmV4dHJhY3QgNiAwCmxvYWQgNQpjb25jYXQKc3RvcmUgNQpiIHNldHRsZV83X2wzCnNldHRsZV83X2wyOgpjYWxsc3ViIHBheW91dF82CnB1c2hieXRlcyAweDU5NmY3NTIwNzc2ZjZlMjEgLy8gIllvdSB3b24hIgpzdG9yZSA1CmxvYWQgNQpsZW4KaXRvYgpleHRyYWN0IDYgMApsb2FkIDUKY29uY2F0CnN0b3JlIDUKc2V0dGxlXzdfbDM6CnR4biBTZW5kZXIKYnl0ZWNfMCAvLyAiY29tbWl0bWVudF9yb3VuZCIKYXBwX2xvY2FsX2RlbAp0eG4gU2VuZGVyCmJ5dGVjXzEgLy8gImJldCIKYXBwX2xvY2FsX2RlbAp0eG4gU2VuZGVyCmJ5dGVjXzIgLy8gImhlYWRzIgphcHBfbG9jYWxfZGVsCmxvYWQgNQpyZXRzdWI=";
    override clearProgram: string = "I3ByYWdtYSB2ZXJzaW9uIDcKcHVzaGludCAwIC8vIDAKcmV0dXJu";
    override methods: algosdk.ABIMethod[] = [
        new algosdk.ABIMethod({ name: "flip_coin", desc: "", args: [{ type: "pay", name: "bet_payment", desc: "" }, { type: "uint64", name: "round", desc: "" }, { type: "bool", name: "heads", desc: "" }], returns: { type: "void", desc: "" } }),
        new algosdk.ABIMethod({ name: "settle", desc: "", args: [{ type: "application", name: "beacon_app", desc: "" }], returns: { type: "string", desc: "" } })
    ];
    async flip_coin(args: {
        bet_payment: algosdk.TransactionWithSigner | algosdk.Transaction;
        round: bigint;
        heads: boolean;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<void>> {
        const result = await this.call(algosdk.getMethodByName(this.methods, "flip_coin"), { bet_payment: args.bet_payment, round: args.round, heads: args.heads }, txnParams);
        return new bkr.ABIResult<void>(result);
    }
    async settle(args: {
        beacon_app?: bigint;
    }, txnParams?: bkr.TransactionOverrides): Promise<bkr.ABIResult<string>> {
        const result = await this.call(algosdk.getMethodByName(this.methods, "settle"), { beacon_app: args.beacon_app === undefined ? await this.resolve("constant", 110096026) : args.beacon_app }, txnParams);
        return new bkr.ABIResult<string>(result, result.returnValue as string);
    }
}
