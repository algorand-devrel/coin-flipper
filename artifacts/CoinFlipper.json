{"hints": {"settle": {"default_arguments": {"beacon_app": {"source": "global-state", "data": "beacon_app_id"}}}}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDcKaW50Y2Jsb2NrIDAgMSAyCmJ5dGVjYmxvY2sgMHg2MjY1NzQ3MzVmNmY3NTc0NzM3NDYxNmU2NDY5NmU2NyAweDYzNmY2ZDZkNjk3NDZkNjU2ZTc0NWY3MjZmNzU2ZTY0IDB4NjI2NTYxNjM2ZjZlNWY2MTcwNzA1ZjY5NjQgMHg2ZDYxNzg1ZjYyNjU3NCAweDZkNjk2ZTVmNjI2NTc0IDB4NjI2NTc0IDB4Njg2NTYxNjQ3Mwp0eG4gTnVtQXBwQXJncwppbnRjXzAgLy8gMAo9PQpibnogbWFpbl9sOAp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweDM1MmQwZjEyIC8vICJjb25maWd1cmUodWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZCIKPT0KYm56IG1haW5fbDcKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMApwdXNoYnl0ZXMgMHg4ZjI4YmRhYSAvLyAiZmxpcF9jb2luKHBheSx1aW50NjQsYm9vbCl2b2lkIgo9PQpibnogbWFpbl9sNgp0eG5hIEFwcGxpY2F0aW9uQXJncyAwCnB1c2hieXRlcyAweGJhMTFiM2ZmIC8vICJzZXR0bGUoYXBwbGljYXRpb24pc3RyaW5nIgo9PQpibnogbWFpbl9sNQplcnIKbWFpbl9sNToKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQppbnRjXzAgLy8gMApnZXRieXRlCmNhbGxzdWIgc2V0dGxlXzEyCnN0b3JlIDYKcHVzaGJ5dGVzIDB4MTUxZjdjNzUgLy8gMHgxNTFmN2M3NQpsb2FkIDYKY29uY2F0CmxvZwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sNjoKdHhuIE9uQ29tcGxldGlvbgppbnRjXzAgLy8gTm9PcAo9PQp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQomJgphc3NlcnQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQpidG9pCnN0b3JlIDQKdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgppbnRjXzAgLy8gMApwdXNoaW50IDggLy8gOAoqCmdldGJpdApzdG9yZSA1CnR4biBHcm91cEluZGV4CmludGNfMSAvLyAxCi0Kc3RvcmUgMwpsb2FkIDMKZ3R4bnMgVHlwZUVudW0KaW50Y18xIC8vIHBheQo9PQphc3NlcnQKbG9hZCAzCmxvYWQgNApsb2FkIDUKY2FsbHN1YiBmbGlwY29pbl85CmludGNfMSAvLyAxCnJldHVybgptYWluX2w3Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CiYmCmFzc2VydAp0eG5hIEFwcGxpY2F0aW9uQXJncyAxCmJ0b2kKc3RvcmUgMAp0eG5hIEFwcGxpY2F0aW9uQXJncyAyCmJ0b2kKc3RvcmUgMQp0eG5hIEFwcGxpY2F0aW9uQXJncyAzCmJ0b2kKc3RvcmUgMgpsb2FkIDAKbG9hZCAxCmxvYWQgMgpjYWxsc3ViIGNvbmZpZ3VyZV84CmludGNfMSAvLyAxCnJldHVybgptYWluX2w4Ogp0eG4gT25Db21wbGV0aW9uCmludGNfMCAvLyBOb09wCj09CmJueiBtYWluX2wxOAp0eG4gT25Db21wbGV0aW9uCmludGNfMSAvLyBPcHRJbgo9PQpibnogbWFpbl9sMTcKdHhuIE9uQ29tcGxldGlvbgppbnRjXzIgLy8gQ2xvc2VPdXQKPT0KYm56IG1haW5fbDE2CnR4biBPbkNvbXBsZXRpb24KcHVzaGludCA0IC8vIFVwZGF0ZUFwcGxpY2F0aW9uCj09CmJueiBtYWluX2wxNQp0eG4gT25Db21wbGV0aW9uCnB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgo9PQpibnogbWFpbl9sMTQKZXJyCm1haW5fbDE0Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAohPQphc3NlcnQKY2FsbHN1YiBkZWxldGVfMwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTU6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIHVwZGF0ZV81CmludGNfMSAvLyAxCnJldHVybgptYWluX2wxNjoKdHhuIEFwcGxpY2F0aW9uSUQKaW50Y18wIC8vIDAKIT0KYXNzZXJ0CmNhbGxzdWIgY2xvc2VvdXRfNwppbnRjXzEgLy8gMQpyZXR1cm4KbWFpbl9sMTc6CnR4biBBcHBsaWNhdGlvbklECmludGNfMCAvLyAwCiE9CmFzc2VydApjYWxsc3ViIG9wdGluXzYKaW50Y18xIC8vIDEKcmV0dXJuCm1haW5fbDE4Ogp0eG4gQXBwbGljYXRpb25JRAppbnRjXzAgLy8gMAo9PQphc3NlcnQKY2FsbHN1YiBjcmVhdGVfMQppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGF1dGhfb25seQphdXRob25seV8wOgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyBjcmVhdGUKY3JlYXRlXzE6CmJ5dGVjXzIgLy8gImJlYWNvbl9hcHBfaWQiCnB1c2hpbnQgMTEwMDk2MDI2IC8vIDExMDA5NjAyNgphcHBfZ2xvYmFsX3B1dApieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgppbnRjXzAgLy8gMAphcHBfZ2xvYmFsX3B1dApieXRlY18zIC8vICJtYXhfYmV0IgpwdXNoaW50IDEwMDAwMDAgLy8gMTAwMDAwMAphcHBfZ2xvYmFsX3B1dApieXRlYyA0IC8vICJtaW5fYmV0IgpwdXNoaW50IDUwMDAgLy8gNTAwMAphcHBfZ2xvYmFsX3B1dApyZXRzdWIKCi8vIGF1dGhfb25seQphdXRob25seV8yOgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyBkZWxldGUKZGVsZXRlXzM6CnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV8yCi8vIHVuYXV0aG9yaXplZAphc3NlcnQKYnl0ZWNfMCAvLyAiYmV0c19vdXRzdGFuZGluZyIKYXBwX2dsb2JhbF9nZXQKaW50Y18wIC8vIDAKPT0KYXNzZXJ0Cml0eG5fYmVnaW4KaW50Y18xIC8vIHBheQppdHhuX2ZpZWxkIFR5cGVFbnVtCnR4biBTZW5kZXIKaXR4bl9maWVsZCBSZWNlaXZlcgppbnRjXzAgLy8gMAppdHhuX2ZpZWxkIEFtb3VudAp0eG4gU2VuZGVyCml0eG5fZmllbGQgQ2xvc2VSZW1haW5kZXJUbwppdHhuX3N1Ym1pdAppbnRjXzEgLy8gMQpyZXR1cm4KCi8vIGF1dGhfb25seQphdXRob25seV80OgpnbG9iYWwgQ3JlYXRvckFkZHJlc3MKPT0KcmV0c3ViCgovLyB1cGRhdGUKdXBkYXRlXzU6CnR4biBTZW5kZXIKY2FsbHN1YiBhdXRob25seV80Ci8vIHVuYXV0aG9yaXplZAphc3NlcnQKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBvcHRfaW4Kb3B0aW5fNjoKaW50Y18xIC8vIDEKcmV0dXJuCgovLyBjbG9zZV9vdXQKY2xvc2VvdXRfNzoKdHhuIFNlbmRlcgpieXRlY18xIC8vICJjb21taXRtZW50X3JvdW5kIgphcHBfbG9jYWxfZ2V0CmludGNfMCAvLyAwCj4KYnogY2xvc2VvdXRfN19sMgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQotCmFwcF9nbG9iYWxfcHV0CmNsb3Nlb3V0XzdfbDI6CmludGNfMSAvLyAxCnJldHVybgoKLy8gY29uZmlndXJlCmNvbmZpZ3VyZV84OgpzdG9yZSAxMgpzdG9yZSAxMQpzdG9yZSAxMAp0eG4gU2VuZGVyCmNhbGxzdWIgYXV0aG9ubHlfMAovLyB1bmF1dGhvcml6ZWQKYXNzZXJ0CmxvYWQgMTEKbG9hZCAxMgo8Ci8vIG1pbiBiZXQgbXVzdCBiZSA8IG1heCBiZXQKYXNzZXJ0CmJ5dGVjXzIgLy8gImJlYWNvbl9hcHBfaWQiCmxvYWQgMTAKYXBwX2dsb2JhbF9wdXQKYnl0ZWMgNCAvLyAibWluX2JldCIKbG9hZCAxMQphcHBfZ2xvYmFsX3B1dApieXRlY18zIC8vICJtYXhfYmV0Igpsb2FkIDEyCmFwcF9nbG9iYWxfcHV0CnJldHN1YgoKLy8gZmxpcF9jb2luCmZsaXBjb2luXzk6CnN0b3JlIDE1CnN0b3JlIDE0CnN0b3JlIDEzCmxvYWQgMTMKZ3R4bnMgQW1vdW50CmJ5dGVjIDQgLy8gIm1pbl9iZXQiCmFwcF9nbG9iYWxfZ2V0Cj49Ci8vIHBheW1lbnQgbXVzdCBiZSA+PSA1bUEgYW5kIDwgMUEKYXNzZXJ0CmxvYWQgMTMKZ3R4bnMgQW1vdW50CmJ5dGVjXzMgLy8gIm1heF9iZXQiCmFwcF9nbG9iYWxfZ2V0Cjw9Ci8vIHBheW1lbnQgbXVzdCBiZSA+PSA1bUEgYW5kIDwgMUEKYXNzZXJ0CmxvYWQgMTMKZ3R4bnMgUmVjZWl2ZXIKZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKPT0KLy8gcGF5bWVudCBtdXN0IHRvIHRoZSBjb250cmFjdCBhZGRyZXNzCmFzc2VydApsb2FkIDE0Cmdsb2JhbCBSb3VuZAo+Ci8vIHJvdW5kIG11c3QgYmUgYXQgbGVhc3QgMSBpbnRlcnZhbCBpbiB0aGUgZnV0dXJlIGFuZCBubyBtb3JlIHRoYW4gMTAgcm91bmRzIGluIHRoZSBmdXR1cmUKYXNzZXJ0CmxvYWQgMTQKZ2xvYmFsIFJvdW5kCnB1c2hpbnQgMTAgLy8gMTAKKwo8Ci8vIHJvdW5kIG11c3QgYmUgYXQgbGVhc3QgMSBpbnRlcnZhbCBpbiB0aGUgZnV0dXJlIGFuZCBubyBtb3JlIHRoYW4gMTAgcm91bmRzIGluIHRoZSBmdXR1cmUKYXNzZXJ0CnR4biBTZW5kZXIKaW50Y18wIC8vIDAKYnl0ZWNfMSAvLyAiY29tbWl0bWVudF9yb3VuZCIKYXBwX2xvY2FsX2dldF9leApzdG9yZSAxNwpzdG9yZSAxNgpsb2FkIDE3CiEKLy8gdGhlcmUgaXMgYWxyZWFkeSBhIGJldCBvdXRzdGFuZGluZwphc3NlcnQKdHhuIFNlbmRlcgpieXRlY18xIC8vICJjb21taXRtZW50X3JvdW5kIgpsb2FkIDE0CmFwcF9sb2NhbF9wdXQKdHhuIFNlbmRlcgpieXRlYyA1IC8vICJiZXQiCmxvYWQgMTMKZ3R4bnMgQW1vdW50CmFwcF9sb2NhbF9wdXQKdHhuIFNlbmRlcgpieXRlYyA2IC8vICJoZWFkcyIKbG9hZCAxNQphcHBfbG9jYWxfcHV0CmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmFwcF9nbG9iYWxfZ2V0CmludGNfMSAvLyAxCisKYXBwX2dsb2JhbF9wdXQKcmV0c3ViCgovLyBnZXRfcmFuZG9tbmVzcwpnZXRyYW5kb21uZXNzXzEwOgp0eG4gU2VuZGVyCmJ5dGVjXzEgLy8gImNvbW1pdG1lbnRfcm91bmQiCmFwcF9sb2NhbF9nZXQKc3RvcmUgMTgKaW50Y18wIC8vIDAKaXRvYgpleHRyYWN0IDYgMApwdXNoYnl0ZXMgMHggLy8gIiIKY29uY2F0CnN0b3JlIDE5Cml0eG5fYmVnaW4KcHVzaGludCA2IC8vIGFwcGwKaXR4bl9maWVsZCBUeXBlRW51bQpieXRlY18yIC8vICJiZWFjb25fYXBwX2lkIgphcHBfZ2xvYmFsX2dldAppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKcHVzaGJ5dGVzIDB4NDdjMjBjMjMgLy8gIm11c3RfZ2V0KHVpbnQ2NCxieXRlW10pYnl0ZVtdIgppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwpsb2FkIDE4Cml0b2IKaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKbG9hZCAxOQppdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwppdHhuX3N1Ym1pdAppdHhuIExhc3RMb2cKZXh0cmFjdCA0IDAKcmV0c3ViCgovLyBwYXlvdXQKcGF5b3V0XzExOgppdHhuX2JlZ2luCmludGNfMSAvLyBwYXkKaXR4bl9maWVsZCBUeXBlRW51bQp0eG4gU2VuZGVyCml0eG5fZmllbGQgUmVjZWl2ZXIKdHhuIFNlbmRlcgpieXRlYyA1IC8vICJiZXQiCmFwcF9sb2NhbF9nZXQKaW50Y18yIC8vIDIKKgppdHhuX2ZpZWxkIEFtb3VudAppdHhuX3N1Ym1pdApyZXRzdWIKCi8vIHNldHRsZQpzZXR0bGVfMTI6CnN0b3JlIDcKY2FsbHN1YiBnZXRyYW5kb21uZXNzXzEwCmV4dHJhY3QgMiAwCmludGNfMCAvLyAwCmdldGJpdApzdG9yZSA5CnR4biBTZW5kZXIKYnl0ZWMgNiAvLyAiaGVhZHMiCmFwcF9sb2NhbF9nZXQKbG9hZCA5Cj09CmJueiBzZXR0bGVfMTJfbDIKcHVzaGJ5dGVzIDB4NTk2Zjc1MjA2YzZmNzM3NDIwM2EyOCAvLyAiWW91IGxvc3QgOigiCnN0b3JlIDgKbG9hZCA4CmxlbgppdG9iCmV4dHJhY3QgNiAwCmxvYWQgOApjb25jYXQKc3RvcmUgOApiIHNldHRsZV8xMl9sMwpzZXR0bGVfMTJfbDI6CmNhbGxzdWIgcGF5b3V0XzExCnB1c2hieXRlcyAweDU5NmY3NTIwNzc2ZjZlMjEgLy8gIllvdSB3b24hIgpzdG9yZSA4CmxvYWQgOApsZW4KaXRvYgpleHRyYWN0IDYgMApsb2FkIDgKY29uY2F0CnN0b3JlIDgKc2V0dGxlXzEyX2wzOgp0eG4gU2VuZGVyCmJ5dGVjXzEgLy8gImNvbW1pdG1lbnRfcm91bmQiCmFwcF9sb2NhbF9kZWwKdHhuIFNlbmRlcgpieXRlYyA1IC8vICJiZXQiCmFwcF9sb2NhbF9kZWwKdHhuIFNlbmRlcgpieXRlYyA2IC8vICJoZWFkcyIKYXBwX2xvY2FsX2RlbApieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgpieXRlY18wIC8vICJiZXRzX291dHN0YW5kaW5nIgphcHBfZ2xvYmFsX2dldAppbnRjXzEgLy8gMQotCmFwcF9nbG9iYWxfcHV0CmxvYWQgOApyZXRzdWI=", "clear": "I3ByYWdtYSB2ZXJzaW9uIDcKaW50Y2Jsb2NrIDEgMApieXRlY2Jsb2NrIDB4NjI2NTc0NzM1ZjZmNzU3NDczNzQ2MTZlNjQ2OTZlNjcKdHhuIE51bUFwcEFyZ3MKaW50Y18xIC8vIDAKPT0KYm56IG1haW5fbDIKZXJyCm1haW5fbDI6CmNhbGxzdWIgY2xlYXJzdGF0ZV8wCmludGNfMCAvLyAxCnJldHVybgoKLy8gY2xlYXJfc3RhdGUKY2xlYXJzdGF0ZV8wOgp0eG4gU2VuZGVyCnB1c2hieXRlcyAweDYzNmY2ZDZkNjk3NDZkNjU2ZTc0NWY3MjZmNzU2ZTY0IC8vICJjb21taXRtZW50X3JvdW5kIgphcHBfbG9jYWxfZ2V0CmludGNfMSAvLyAwCj4KYnogY2xlYXJzdGF0ZV8wX2wyCmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmJ5dGVjXzAgLy8gImJldHNfb3V0c3RhbmRpbmciCmFwcF9nbG9iYWxfZ2V0CmludGNfMCAvLyAxCi0KYXBwX2dsb2JhbF9wdXQKY2xlYXJzdGF0ZV8wX2wyOgppbnRjXzAgLy8gMQpyZXR1cm4="}, "schema": {"local": {"declared": {"bet": {"type": "uint64", "key": "bet", "descr": "The amount of the bet, to be doubled on win"}, "commitment_round": {"type": "uint64", "key": "commitment_round", "descr": "The round this account committed to, to use for future randomness"}, "heads": {"type": "uint64", "key": "heads", "descr": "The bet outcome, 0 for tails, >0 for heads"}}, "dynamic": {}}, "global": {"declared": {"beacon_app_id": {"type": "uint64", "key": "beacon_app_id", "descr": "The App ID of the randomness beacon. Should adhere to ARC-21"}, "bets_outstanding": {"type": "uint64", "key": "bets_outstanding", "descr": "Counter to keep track of how many bets are outstanding."}, "max_bet": {"type": "uint64", "key": "max_bet", "descr": "The maximum bet for flipping a coin"}, "min_bet": {"type": "uint64", "key": "min_bet", "descr": "The minimum bet for flipping a coin"}}, "dynamic": {}}}, "contract": {"name": "CoinFlipper", "methods": [{"name": "configure", "args": [{"type": "uint64", "name": "app_id", "desc": "The uint64 app id of the beacon app to use"}, {"type": "uint64", "name": "min_bet", "desc": "The uint64 minimum bet allowed, specified in base algo units"}, {"type": "uint64", "name": "max_bet", "desc": "the uint64 maximum bet allowed, specified in base algo units"}], "returns": {"type": "void"}, "desc": "Allows configuration of the application state values"}, {"name": "flip_coin", "args": [{"type": "pay", "name": "bet_payment"}, {"type": "uint64", "name": "round", "desc": "Uint64 representing the round to claim randomness for (must be multiple of 8 and in the future)"}, {"type": "bool", "name": "heads", "desc": "boolean representing heads or tails"}], "returns": {"type": "void"}, "desc": "called to place a bet on the outcome of a coin flip"}, {"name": "settle", "args": [{"type": "application", "name": "beacon_app", "desc": "App ref for random oracle beacon"}], "returns": {"type": "string", "desc": "A string with the result of the bet"}, "desc": "allows settlement of a bet placed during `flip_coin`"}], "networks": {}, "desc": "\n    Allows user to flip a coin, choosing heads or tails and some future round to settle.\n\n    If the user guesses correctly, their bet is doubled and paid out to them.\n    "}}