#pragma version 7
intcblock 0 1 8
bytecblock 0x636f6d6d69746d656e745f726f756e64 0x626574 0x6865616473
txn NumAppArgs
intc_0 // 0
==
bnz main_l6
txna ApplicationArgs 0
pushbytes 0x8f28bdaa // "flip_coin(pay,uint64,bool)void"
==
bnz main_l5
txna ApplicationArgs 0
pushbytes 0xba11b3ff // "settle(application)string"
==
bnz main_l4
err
main_l4:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
intc_0 // 0
getbyte
callsub settle_7
store 3
pushbytes 0x151f7c75 // 0x151f7c75
load 3
concat
log
intc_1 // 1
return
main_l5:
txn OnCompletion
intc_0 // NoOp
==
txn ApplicationID
intc_0 // 0
!=
&&
assert
txna ApplicationArgs 1
btoi
store 1
txna ApplicationArgs 2
intc_0 // 0
intc_2 // 8
*
getbit
store 2
txn GroupIndex
intc_1 // 1
-
store 0
load 0
gtxns TypeEnum
intc_1 // pay
==
assert
load 0
load 1
load 2
callsub flipcoin_4
intc_1 // 1
return
main_l6:
txn OnCompletion
intc_0 // NoOp
==
bnz main_l12
txn OnCompletion
intc_1 // OptIn
==
bnz main_l11
txn OnCompletion
pushint 5 // DeleteApplication
==
bnz main_l10
err
main_l10:
txn ApplicationID
intc_0 // 0
!=
assert
callsub delete_2
intc_1 // 1
return
main_l11:
txn ApplicationID
intc_0 // 0
!=
assert
callsub optin_3
intc_1 // 1
return
main_l12:
txn ApplicationID
intc_0 // 0
==
assert
callsub create_0
intc_1 // 1
return

// create
create_0:
intc_1 // 1
return

// auth_only
authonly_1:
global CreatorAddress
==
retsub

// delete
delete_2:
txn Sender
callsub authonly_1
// unauthorized
assert
intc_1 // 1
return

// opt_in
optin_3:
intc_1 // 1
return

// flip_coin
flipcoin_4:
store 9
store 8
store 7
load 7
gtxns Amount
pushint 5000 // 5000
>=
// payment must be >= 5mA
assert
load 7
gtxns Receiver
global CurrentApplicationAddress
==
// payment must to the contract address
assert
load 8
intc_2 // 8
%
intc_0 // 0
==
// round must be a multiple of 8
assert
load 8
global Round
intc_2 // 8
+
>=
// round must be at least 1 interval in the future
assert
txn Sender
intc_0 // 0
bytec_0 // "commitment_round"
app_local_get_ex
store 11
store 10
load 11
!
// there is already a commitment outstanding
assert
txn Sender
bytec_0 // "commitment_round"
load 8
app_local_put
txn Sender
bytec_1 // "bet"
load 7
gtxns Amount
app_local_put
txn Sender
bytec_2 // "heads"
load 9
app_local_put
retsub

// get_randomness
getrandomness_5:
txn Sender
bytec_0 // "commitment_round"
app_local_get
store 12
intc_0 // 0
itob
extract 6 0
pushbytes 0x // ""
concat
store 13
itxn_begin
pushint 6 // appl
itxn_field TypeEnum
pushint 110096026 // 110096026
itxn_field ApplicationID
pushbytes 0x07df463e // "get_must(uint64,byte[])byte[]"
itxn_field ApplicationArgs
load 12
itob
itxn_field ApplicationArgs
load 13
itxn_field ApplicationArgs
itxn_submit
itxn LastLog
extract 4 0
retsub

// payout
payout_6:
itxn_begin
intc_1 // pay
itxn_field TypeEnum
txn Sender
itxn_field Receiver
txn Sender
bytec_1 // "bet"
app_local_get
pushint 2 // 2
*
itxn_field Amount
intc_0 // 0
itxn_field Fee
itxn_submit
retsub

// settle
settle_7:
store 4
callsub getrandomness_5
extract 2 0
intc_0 // 0
getbit
store 6
txn Sender
bytec_2 // "heads"
app_local_get
load 6
==
bnz settle_7_l2
pushbytes 0x596f75206c6f7374203a28 // "You lost :("
store 5
load 5
len
itob
extract 6 0
load 5
concat
store 5
b settle_7_l3
settle_7_l2:
callsub payout_6
pushbytes 0x596f7520776f6e21 // "You won!"
store 5
load 5
len
itob
extract 6 0
load 5
concat
store 5
settle_7_l3:
txn Sender
bytec_0 // "commitment_round"
app_local_del
txn Sender
bytec_1 // "bet"
app_local_del
txn Sender
bytec_2 // "heads"
app_local_del
load 5
retsub